import subprocess
import platform
import socket
import os

def get_open_ports(host="127.0.0.1"):
    try:
        result = subprocess.check_output(["nmap", "-p-", host], stderr=subprocess.DEVNULL)
        return result.decode("utf-8")
    except FileNotFoundError:
        return "[diagnostics] ‚ùå Nmap –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å nmap –¥–ª—è —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—ñ–≤."
    except Exception as e:
        return f"[diagnostics] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—ñ –ø–æ—Ä—Ç—ñ–≤: {str(e)}"

def get_network_interfaces():
    try:
        command = ["ifconfig"] if platform.system() != "Windows" else ["ipconfig"]
        result = subprocess.check_output(command, stderr=subprocess.DEVNULL)
        return result.decode("utf-8")
    except Exception as e:
        return f"[diagnostics] ‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –º–µ—Ä–µ–∂–µ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤: {str(e)}"

def get_local_ip():
    try:
        hostname = socket.gethostname()
        local_ip = socket.gethostbyname(hostname)
        return f"[diagnostics] üß≠ –õ–æ–∫–∞–ª—å–Ω–∞ IP-–∞–¥—Ä–µ—Å–∞: {local_ip}"
    except Exception as e:
        return f"[diagnostics] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ IP: {str(e)}"

def get_system_info():
    return (
        f"[diagnostics] üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {platform.system()}\n"
        f"[diagnostics] –í–µ—Ä—Å—ñ—è: {platform.version()}\n"
        f"[diagnostics] –ü—Ä–æ—Ü–µ—Å–æ—Ä: {platform.processor()}"
    )

def get_firewall_status():
    try:
        if platform.system() == "Darwin":
            result = subprocess.check_output(["/usr/libexec/ApplicationFirewall/socketfilterfw", "--getglobalstate"])
        elif platform.system() == "Linux":
            result = subprocess.check_output(["ufw", "status"])
        else:
            return "[diagnostics] üî• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ firewall –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –Ω–∞ —Ü—ñ–π –û–°."
        return f"[diagnostics] üî• Firewall —Å—Ç–∞—Ç—É—Å:\n{result.decode('utf-8')}"
    except Exception as e:
        return f"[diagnostics] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ firewall: {str(e)}"

def check_rootkits():
    try:
        result = subprocess.check_output(["chkrootkit"], stderr=subprocess.DEVNULL)
        return f"[diagnostics] ü¶† Rootkit –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞:\n{result.decode('utf-8')}"
    except FileNotFoundError:
        return "[diagnostics] ü¶† chkrootkit –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É rootkit."
    except Exception as e:
        return f"[diagnostics] ‚ùå –ü–æ–º–∏–ª–∫–∞ rootkit –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏: {str(e)}"

def get_active_connections():
    try:
        result = subprocess.check_output(["netstat", "-tunap"], stderr=subprocess.DEVNULL)
        return f"[diagnostics] üîå –ê–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:\n{result.decode('utf-8')}"
    except Exception as e:
        return f"[diagnostics] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑‚Äô—î–¥–Ω–∞–Ω–Ω—è: {str(e)}"

def ping_test(host="8.8.8.8"):
    try:
        result = subprocess.check_output(["ping", "-c", "4", host], stderr=subprocess.DEVNULL)
        return f"[diagnostics] üì∂ Ping —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n{result.decode('utf-8')}"
    except Exception as e:
        return f"[diagnostics] ‚ùå –ü–æ–º–∏–ª–∫–∞ ping: {str(e)}"

def traceroute(host="8.8.8.8"):
    try:
        result = subprocess.check_output(["traceroute", host], stderr=subprocess.DEVNULL)
        return f"[diagnostics] üõ∞Ô∏è Traceroute:\n{result.decode('utf-8')}"
    except Exception as e:
        return f"[diagnostics] ‚ùå –ü–æ–º–∏–ª–∫–∞ traceroute: {str(e)}"

def read_system_logs():
    logs = []
    possible_paths = ["/var/log/system.log", "/var/log/syslog", "/var/log/auth.log"]
    for path in possible_paths:
        if os.path.exists(path):
            try:
                with open(path, "r") as f:
                    content = f.read()[-1500:]  # –æ—Å—Ç–∞–Ω–Ω—ñ ~1500 —Å–∏–º–≤–æ–ª—ñ–≤
                    logs.append(f"[diagnostics] üìÇ –õ–æ–≥ {path}:\n{content}")
            except Exception as e:
                logs.append(f"[diagnostics] ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ {path}: {str(e)}")
    return "\n\n".join(logs) if logs else "[diagnostics] ‚ÑπÔ∏è –õ–æ–≥–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ñ."

def run_security_audit():
    return "\n".join([
        get_system_info(),
        get_local_ip(),
        get_firewall_status(),
        get_open_ports(),
        get_active_connections(),
        check_rootkits(),
        read_system_logs(),
        ping_test(),
        traceroute()
    ])