import os
from cryptography.fernet import Fernet
from core.logic import process_command
from memory.memory import Memory
from encryption.secure_store import SecureVault
from interface.tts_output import speak
from interface.text_input import get_user_input
from dotenv import load_dotenv

def main():
    print("[Antony] –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–æ–¥—É–ª—ñ–≤...")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env
    load_dotenv()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á —ñ–∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –≥–µ–Ω–µ—Ä—É—î–º–æ (—Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑ .env)
    vault_key = os.getenv("VAULT_KEY")
    if not vault_key:
        vault_key = Fernet.generate_key().decode()
        print(f"[Antony] üîê –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –Ω–æ–≤–∏–π –∫–ª—é—á –¥–ª—è VAULT_KEY:\n{vault_key}")
        print("[Antony] –î–æ–¥–∞–π —Ü–µ–π –∫–ª—é—á —É —Å–≤—ñ–π .env —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ:\nVAULT_KEY=—Ç—É—Ç_—Ç–≤—ñ–π_–∫–ª—é—á")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ—ó –ø–∞–º º—è—Ç—ñ
    vault = SecureVault("data/vault.json", key=vault_key)
    memory = Memory(vault)

    # –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—ñ—Ç–∞–Ω–Ω—è
    speak("–ü—Ä–∏–≤—ñ—Ç! –Ø Antony. –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.")

    while True:
        try:
            user_input = get_user_input()

            if not user_input.strip():
                continue

            if user_input.lower() in ["–≤–∏–π—Ç–∏", "exit", "quit"]:
                speak("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –Ø –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á.")
                break

            # –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É —ñ –æ—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            response = process_command(user_input, memory)

            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≥–æ–ª–æ—Å–æ–º
            speak(response)

        except KeyboardInterrupt:
            speak("–°–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤—Ä—É—á–Ω—É.")
            break
        except Exception as e:
            speak("–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏.")
            print(f"[Antony ‚ö†Ô∏è] Error: {e}")

if __name__ == "__main__":
    main()