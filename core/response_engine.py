import random

TEMPLATES = {
    "greeting": [
        "–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ —Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ?",
        "–í—ñ—Ç–∞—é, –¥—Ä—É–∂–µ! –†–∞–¥—ñ–π–º–æ –¥–Ω—é!",
        "–ü—Ä–∏–≤—ñ—Ç, —è –∑–Ω–æ–≤—É —Ç—É—Ç –¥–ª—è —Ç–µ–±–µ.",
        "–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –ì–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏."
    ],

    "farewell": [
        "–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ! –ì–∞—Ä–Ω–æ–≥–æ —Ç–æ–±—ñ –¥–Ω—è.",
        "–ë—É–≤–∞–π! –ó–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á.",
        "–í—ñ–¥–ø–æ—á–∏–≤–∞–π, —è –∑–∞–ª–∏—à–∞—é—Å—å –Ω–∞ –∑–≤‚Äô—è–∑–∫—É.",
        "–ù–∞ –≤—Å–µ –¥–æ–±—Ä–µ! –Ø –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á."
    ],

    "gratitude": [
        "–î—è–∫—É—é –∑–∞ —Ç–≤–æ—ó —Å–ª–æ–≤–∞!",
        "–¶–µ –¥—É–∂–µ –ø—Ä–∏—î–º–Ω–æ —á—É—Ç–∏.",
        "–Ø –≤–¥—è—á–Ω–∏–π —Ç–æ–±—ñ.",
        "–ó–∞–≤–∂–¥–∏ —Ä–∞–¥–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏."
    ],

    "recall_memory_empty": [
        "–Ø —â–µ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–±–µ—Ä—ñ–≥ —É —Å–≤–æ—ó–π –ø–∞–º º—è—Ç—ñ.",
        "–ú–æ—è –ø–∞–º º—è—Ç—å –Ω–∞—Ä–∞–∑—ñ –ø–æ—Ä–æ–∂–Ω—è.",
        "–ù–∞—Ä–∞–∑—ñ —è –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–∞–º º—è—Ç–∞—é –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ–≥–æ."
    ],

    "recall_memory_filled": [
        "–Ø –ø–∞–º º—è—Ç–∞—é –Ω–∞—Å—Ç—É–ø–Ω–µ:\n{facts}",
        "–£ –º–æ—ó–π –ø–∞–º º—è—Ç—ñ —î —Ç–∞–∫—ñ –∑–∞–ø–∏—Å–∏:\n{facts}",
        "–û—Å—å —â–æ —è –∑–±–µ—Ä—ñ–≥:\n{facts}"
    ],

    "current_time": [
        "–ó–∞—Ä–∞–∑ {time}.",
        "–ù–∞ –≥–æ–¥–∏–Ω–Ω–∏–∫—É {time}.",
        "–¢–æ—á–Ω–∏–π —á–∞—Å: {time}."
    ],

    "ethical_hacking": [
        "–û—Å—å —â–æ –≤–¥–∞–ª–æ—Å—è –¥—ñ–∑–Ω–∞—Ç–∏—Å—è:\n\nüîπ IP: {ip}\nüîπ –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏:\n{interfaces}\nüîπ –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏:\n{ports}",
        "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–∫–∞–Ω—É–≤–∞–Ω–Ω—è:\nüåê IP: {ip}\nüß© –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∏:\n{interfaces}\nüì° –ü–æ—Ä—Ç—Å–∫–∞–Ω:\n{ports}"
    ],

    "security_audit": [
        "–°–∏—Å—Ç–µ–º–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n{sys_info}\n\n–ê—É–¥–∏—Ç:\n{audit}",
        "üîê –ó–≤—ñ—Ç –±–µ–∑–ø–µ–∫–∏:\n\n{sys_info}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç:\n{audit}"
    ],

    "unknown": [
        "–¶–µ —Ç—Ä–æ—Ö–∏ –∑–∞ –º–µ–∂–∞–º–∏ –º–æ–≥–æ —Ä–æ–∑—É–º—ñ–Ω–Ω—è. –ü–æ—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ñ—à–µ?",
        "–©–µ –Ω–µ –∑–Ω–∞—é, —è–∫ –Ω–∞ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∞–ª–µ –Ω–∞–º–∞–≥–∞—é—Å—å –Ω–∞–≤—á–∏—Ç–∏—Å—è.",
        "–ú–æ–∂–ª–∏–≤–æ, –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª—é–π? –Ø –ø–æ–∫–∏ –≤—á—É—Å—è."
    ]
}


def generate_response(intent: str, data: dict = None) -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–º—ñ—Ä—É —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É (–æ–ø—Ü—ñ–π–Ω–æ).
    :param intent: –ù–∞–∑–≤–∞ –Ω–∞–º—ñ—Ä—É
    :param data: –î–∞–Ω—ñ –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    :return: –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∞ —Ñ—Ä–∞–∑–∞
    """
    data = data or {}

    # –û–±—Ä–æ–±–∫–∞ –ø–∞–º º—è—Ç—ñ
    if intent == "recall_memory":
        facts = data.get("facts", [])
        if not facts:
            return random.choice(TEMPLATES["recall_memory_empty"])
        joined = "\n- " + "\n- ".join(facts)
        return random.choice(TEMPLATES["recall_memory_filled"]).format(facts=joined)

    # –Ü–Ω—à—ñ —ñ–Ω—Ç–µ–Ω—Å–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    if intent in TEMPLATES:
        template = random.choice(TEMPLATES[intent])
        try:
            return template.format(**data)
        except KeyError as e:
            return f"[response_engine] ‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —É —à–∞–±–ª–æ–Ω—ñ: {str(e)}"

    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    return random.choice(TEMPLATES["unknown"])