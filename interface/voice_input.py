import queue
import sounddevice as sd
import vosk
import json
import os
import threading

# –®–ª—è—Ö –¥–æ –º–æ–¥–µ–ª—ñ (—Ä–æ–∑–ø–∞–∫–æ–≤–∞–Ω–æ—ó)
MODEL_PATH = "models/vosk-model-small-ua-0.22"

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ
if not os.path.exists(MODEL_PATH):
    raise RuntimeError(f"[Vosk ‚ùå] –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É '{MODEL_PATH}' ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂ —ó—ó!")

model = vosk.Model(MODEL_PATH)
q = queue.Queue()

def callback(indata, frames, time_, status):
    if status:
        print(f"[Mic ‚ö†Ô∏è]: {status}")
    q.put(bytes(indata))

def get_voice_input(timeout: int = 10) -> str:
    """
    –°–ª—É—Ö–∞—î –º—ñ–∫—Ä–æ—Ñ–æ–Ω, —Ä–æ–∑–ø—ñ–∑–Ω–∞—î –º–æ–≤—É —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç.
    timeout ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É —É —Å–µ–∫—É–Ω–¥–∞—Ö.
    """
    print("[üéß Antony —Å–ª—É—Ö–∞—î —Ç–µ–±–µ...]")

    result_text = ""
    done_event = threading.Event()

    def recognition_thread():
        nonlocal result_text
        rec = vosk.KaldiRecognizer(model, 16000)
        try:
            while not done_event.is_set():
                data = q.get()
                if rec.AcceptWaveform(data):
                    res = json.loads(rec.Result())
                    text = res.get("text", "").strip()
                    if text:
                        result_text = text
                        done_event.set()
                        break
        except Exception as e:
            print(f"[Vosk Error]: {e}")
            done_event.set()

    try:
        with sd.RawInputStream(samplerate=16000, blocksize=8000, dtype='int16',
                               channels=1, callback=callback):
            thread = threading.Thread(target=recognition_thread)
            thread.start()

            # –û—á—ñ–∫—É—î–º–æ –∞–±–æ —Ç–∞–π–º-–∞—É—Ç
            thread.join(timeout=timeout)
            done_event.set()  # –Ø–∫—â–æ —Ç–∞–π–º-–∞—É—Ç, —Å–∏–≥–Ω–∞–ª—ñ–∑—É—î–º–æ –≤–∏—Ö—ñ–¥

            thread.join()  # –ì–∞—Ä–∞–Ω—Ç—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É

    except KeyboardInterrupt:
        print("\n[Antony]: –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤—ñ–¥ –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –≤—Ä—É—á–Ω—É.")
    except Exception as e:
        print(f"[Antony]: –ü–æ–º–∏–ª–∫–∞ –∞—É–¥—ñ–æ: {e}")

    if result_text:
        print(f"[Antony üó£Ô∏è]: –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: {result_text}")
    else:
        print("[Antony]: –ù–µ –ø–æ—á—É—Ç–æ –∂–æ–¥–Ω–æ–≥–æ –≥–æ–ª–æ—Å—É –∞–±–æ —Ç–∞–π–º-–∞—É—Ç.")

    return result_text